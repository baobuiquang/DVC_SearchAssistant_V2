import numpy as np
import json
import csv
import re

def thutuc2context_full(thutuc_item):
    return f"""\
### Th·ªß t·ª•c: {thutuc_item['name']}
Tr√¨nh t·ª± th·ª±c hi·ªán:
{thutuc_item['Tr√¨nh t·ª± th·ª±c hi·ªán']}
C√°ch th·ª©c th·ª±c hi·ªán:
{thutuc_item['C√°ch th·ª©c th·ª±c hi·ªán']}
Th√†nh ph·∫ßn h·ªì s∆°:
{thutuc_item['Th√†nh ph·∫ßn h·ªì s∆°']}
Th·ªùi gian gi·∫£i quy·∫øt:
{thutuc_item['Th·ªùi gian gi·∫£i quy·∫øt']}
ƒê·ªëi t∆∞·ª£ng th·ª±c hi·ªán:
{thutuc_item['ƒê·ªëi t∆∞·ª£ng th·ª±c hi·ªán']}
C∆° quan th·ª±c hi·ªán:
{thutuc_item['C∆° quan th·ª±c hi·ªán']}
K·∫øt qu·∫£:
{thutuc_item['K·∫øt qu·∫£']}
Ph√≠, l·ªá ph√≠:
{thutuc_item['Ph√≠, l·ªá ph√≠']}
T√™n m·∫´u ƒë∆°n, t·ªù khai:
{thutuc_item['T√™n m·∫´u ƒë∆°n, t·ªù khai']}
Y√™u c·∫ßu, ƒëi·ªÅu ki·ªán:
{thutuc_item['Y√™u c·∫ßu, ƒëi·ªÅu ki·ªán']}
CƒÉn c·ª© ph√°p l√Ω:
{thutuc_item['CƒÉn c·ª© ph√°p l√Ω']}
"""

def thutuc2content_full(thutuc_item):
    CHARACTERS_LIMIT = 300
    XEMCHITIET_TEXT = f"... <a href='{thutuc_item['link']}' target='_blank'>(xem chi ti·∫øt)</a>"
    bot_response = f"""\
<h2>Th·ªß t·ª•c: {thutuc_item['name'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['name']) > CHARACTERS_LIMIT else ''}</h2>\
<h3>Th√†nh ph·∫ßn h·ªì s∆°:</h3>\
<p>{thutuc_item['Th√†nh ph·∫ßn h·ªì s∆°'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['Th√†nh ph·∫ßn h·ªì s∆°']) > CHARACTERS_LIMIT else ''}</p>\
<h3>Tr√¨nh t·ª± th·ª±c hi·ªán:</h3>\
<p>{thutuc_item['Tr√¨nh t·ª± th·ª±c hi·ªán'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['Tr√¨nh t·ª± th·ª±c hi·ªán']) > CHARACTERS_LIMIT else ''}</p>\
<h3>C√°ch th·ª©c th·ª±c hi·ªán:</h3>\
<p>{thutuc_item['C√°ch th·ª©c th·ª±c hi·ªán'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['C√°ch th·ª©c th·ª±c hi·ªán']) > CHARACTERS_LIMIT else ''}</p>\
<h3>Y√™u c·∫ßu, ƒëi·ªÅu ki·ªán:</h3>\
<p>{thutuc_item['Y√™u c·∫ßu, ƒëi·ªÅu ki·ªán'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['Y√™u c·∫ßu, ƒëi·ªÅu ki·ªán']) > CHARACTERS_LIMIT else ''}</p>\
<h3>K·∫øt qu·∫£:</h3>\
<p>{thutuc_item['K·∫øt qu·∫£'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['K·∫øt qu·∫£']) > CHARACTERS_LIMIT else ''}</p>\
<h3>Xem ƒë·∫ßy ƒë·ªß vƒÉn b·∫£n th·ªß t·ª•c t·∫°i:</h3>\
<a href='{thutuc_item['link']}' target='_blank'>{thutuc_item['link']}</a>"""
# <h3>Th·ªùi gian gi·∫£i quy·∫øt:</h3>\
# <p>{thutuc_item['Th·ªùi gian gi·∫£i quy·∫øt'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['Th·ªùi gian gi·∫£i quy·∫øt']) > CHARACTERS_LIMIT else ''}</p>\
# <h3>T√™n m·∫´u ƒë∆°n, t·ªù khai:</h3>\
# <p>{thutuc_item['T√™n m·∫´u ƒë∆°n, t·ªù khai'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['T√™n m·∫´u ƒë∆°n, t·ªù khai']) > CHARACTERS_LIMIT else ''}</p>\
# <h3>ƒê·ªëi t∆∞·ª£ng th·ª±c hi·ªán:</h3>\
# <p>{thutuc_item['ƒê·ªëi t∆∞·ª£ng th·ª±c hi·ªán'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['ƒê·ªëi t∆∞·ª£ng th·ª±c hi·ªán']) > CHARACTERS_LIMIT else ''}</p>\
# <h3>C∆° quan th·ª±c hi·ªán:</h3>\
# <p>{thutuc_item['C∆° quan th·ª±c hi·ªán'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['C∆° quan th·ª±c hi·ªán']) > CHARACTERS_LIMIT else ''}</p>\
# <h3>Ph√≠, l·ªá ph√≠:</h3>\
# <p>{thutuc_item['Ph√≠, l·ªá ph√≠'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['Ph√≠, l·ªá ph√≠']) > CHARACTERS_LIMIT else ''}</p>\
# <h3>CƒÉn c·ª© ph√°p l√Ω:</h3>\
# <p>{thutuc_item['CƒÉn c·ª© ph√°p l√Ω'][:CHARACTERS_LIMIT]}{XEMCHITIET_TEXT if len(thutuc_item['CƒÉn c·ª© ph√°p l√Ω']) > CHARACTERS_LIMIT else ''}</p>\
    return bot_response

def thutuc2content_parts(thutuc_item, ls_parts_user_want):
    bot_response = f"""<h2>Th·ªß t·ª•c: {thutuc_item['name']}</h2>"""
    for partuserwant in ls_parts_user_want:
        bot_response += f"""<h3>{partuserwant}:</h3><p>{thutuc_item[partuserwant]}</p>"""    
    bot_response += f"""<h3>Xem ƒë·∫ßy ƒë·ªß vƒÉn b·∫£n th·ªß t·ª•c t·∫°i:</h3><a href='{thutuc_item['link']}' target='_blank'>{thutuc_item['link']}</a>"""
    return bot_response


def craft_content_data(best_thutuc):
    try:
        ls_thutuc_parts = [
            'Tr√¨nh t·ª± th·ª±c hi·ªán', 
            'C√°ch th·ª©c th·ª±c hi·ªán', 
            'Th√†nh ph·∫ßn h·ªì s∆°', 
            'Th·ªùi gian gi·∫£i quy·∫øt', 
            'ƒê·ªëi t∆∞·ª£ng th·ª±c hi·ªán', 
            'C∆° quan th·ª±c hi·ªán', 
            'K·∫øt qu·∫£', 
            'Ph√≠, l·ªá ph√≠', 
            'T√™n m·∫´u ƒë∆°n, t·ªù khai', 
            'Y√™u c·∫ßu, ƒëi·ªÅu ki·ªán', 
            'CƒÉn c·ª© ph√°p l√Ω',
        ]
        ls_thutuc_names = [
            'trinh_tu_thuc_hien', 
            'cach_thuc_thuc_hien', 
            'thanh_phan_ho_so', 
            'thoi_gian_giai_quyet', 
            'doi_tuong_thuc_hien', 
            'co_quan_thuc_hien', 
            'ket_qua', 
            'phi_le_phi', 
            'ten_mau_don_to_khai', 
            'yeu_cau_dieu_kien', 
            'can_cu_phap_ly',
        ]
        res = {}
        for ii, el in enumerate(ls_thutuc_parts):
            res[ls_thutuc_names[ii]] = best_thutuc[el]
        return res
    except:
        return {}

from bin.NLPT.NLPT import Process_NLPT_Normalize
def craft_content_to_display_for_user(input_text, best_thutuc):
    # -----
    ls_thutuc_parts = [
        'Tr√¨nh t·ª± th·ª±c hi·ªán', 
        'C√°ch th·ª©c th·ª±c hi·ªán', 
        'Th√†nh ph·∫ßn h·ªì s∆°', 
        'Th·ªùi gian gi·∫£i quy·∫øt', 
        'ƒê·ªëi t∆∞·ª£ng th·ª±c hi·ªán', 
        'C∆° quan th·ª±c hi·ªán', 
        'K·∫øt qu·∫£', 
        'Ph√≠, l·ªá ph√≠', 
        'T√™n m·∫´u ƒë∆°n, t·ªù khai', 
        'Y√™u c·∫ßu, ƒëi·ªÅu ki·ªán', 
        'CƒÉn c·ª© ph√°p l√Ω',
    ]
    ls_thutuc_user_want_which_part = [
        ['Tr√¨nh t·ª± th·ª±c hi·ªán', 'tr√¨nh t·ª±', 'th·ª±c hi·ªán'], 
        ['C√°ch th·ª©c th·ª±c hi·ªán', 'c√°ch th·ª©c', 'th·ª±c hi·ªán'], 
        ['Th√†nh ph·∫ßn h·ªì s∆°', 'th√†nh ph·∫ßn', 'h·ªì s∆°'], 
        ['Th·ªùi gian gi·∫£i quy·∫øt', 'th·ªùi gian'], 
        ['ƒê·ªëi t∆∞·ª£ng th·ª±c hi·ªán', 'ƒë·ªëi t∆∞·ª£ng', 'th·ª±c hi·ªán'], 
        ['C∆° quan th·ª±c hi·ªán', 'c∆° quan'], 
        ['K·∫øt qu·∫£'], 
        ['Ph√≠, l·ªá ph√≠', 'l·ªá ph√≠', 'chi ph√≠'], 
        ['T√™n m·∫´u ƒë∆°n, t·ªù khai', 'm·∫´u ƒë∆°n', 't·ªù khai'], 
        ['Y√™u c·∫ßu, ƒëi·ªÅu ki·ªán', 'y√™u c·∫ßu', 'ƒëi·ªÅu ki·ªán'], 
        ['CƒÉn c·ª© ph√°p l√Ω', 'cƒÉn c·ª©', 'ph√°p l√Ω'], 
    ]
    for i, el in enumerate(ls_thutuc_user_want_which_part):
        ls_thutuc_user_want_which_part[i] += [Process_NLPT_Normalize(ele) for ele in el]
    # -----
    ls_id_that_user_want = []
    for i, el in enumerate(ls_thutuc_user_want_which_part):
        for ele in el:
            if ele.lower() in input_text.lower():
                ls_id_that_user_want.append(i)
                break
    ls_parts_user_want = [ls_thutuc_parts[idx] for idx in ls_id_that_user_want]
    # print(f"üçåüçåüçåüçåüçå > ls_parts_user_want: {ls_parts_user_want}")
    # -----
    if len(ls_parts_user_want) == 0:                                   # The default -> full
        return thutuc2content_full(best_thutuc)
    else:                                                              # The special -> parts
        return thutuc2content_parts(best_thutuc, ls_parts_user_want)

# ====================================================================================================
# ====================================================================================================
# ====================================================================================================

# -----
# Read cache_2
with open("url/cache_2", mode="r", newline="", encoding="utf-8") as f:
    thutucs = [e for e in csv.DictReader(f)]
    thutuc_keys = list(thutucs[0].keys())
    thutuc_names = [e['name'] for e in thutucs]

# -----
# Create/update HYSE db if needed
docs = [f"{e['name']}" for e in thutucs]
from bin.HYSE.HYSE import Object_HYSE
hyse_engine = Object_HYSE()
for i in range(0, len(docs), 50):
    print(i, end=" ")
    hyse_engine.update(docs[:i])
    # time.sleep(3)
hyse_engine.update(docs)
from bin.LLM.LLM import Process_LLM

# ====================================================================================================
# ====================================================================================================
# ====================================================================================================

def DVC_SearchAssist(input_text):
    # ================================================== HYSE Search
    # -----
    queries = [input_text.strip()]
    hyse_search_result = hyse_engine.search(queries)

    # -----
    res_search_all_idx = []
    for possible_thutuc in hyse_search_result[0]:
        for iidx, original_thutuc_name in enumerate(thutuc_names):
            if original_thutuc_name in possible_thutuc["content"]:
                res_search_all_idx.append(iidx)
                break

    # ================================================== LLM Prompt
    p_danhsachthutuc = [{"M√£ chu·∫©n": thutucs[idx]["code"], "T√™n th·ªß t·ª•c": thutucs[idx]["name"]} for idx in res_search_all_idx]
    p_json_schema_1 = """\
    {
        "type": "object",
        "properties": {
            "M√£ chu·∫©n": {"type": "string", "description": "M√£ chu·∫©n c·ªßa th·ªß t·ª•c li√™n quan nh·∫•t"},
            "T√™n th·ªß t·ª•c": {"type": "string", "description": "T√™n c·ªßa th·ªß t·ª•c li√™n quan nh·∫•t"}
        }
    }"""
    prompt_1 = f"""\
B·∫°n s·∫Ω ƒë∆∞·ª£c cung c·∫•p: (1) C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng, (2) Danh s√°ch th·ªß t·ª•c hi·ªán c√≥, v√† (3) Schema c·∫•u tr√∫c c·ªßa k·∫øt qu·∫£.
Nhi·ªám v·ª• c·ªßa b·∫°n l√†: (4) Tr√≠ch xu·∫•t duy nh·∫•t 1 th·ªß t·ª•c li√™n quan nh·∫•t ƒë·∫øn c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.

### (1) C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:
"{input_text}"

### (2) Danh s√°ch th·ªß t·ª•c hi·ªán c√≥:
{p_danhsachthutuc}

### (3) Schema c·∫•u tr√∫c c·ªßa k·∫øt qu·∫£:
{p_json_schema_1}

### (4) Nhi·ªám v·ª•:
T·ª´ c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng "{input_text}", t√¨m ra duy nh·∫•t 1 th·ªß t·ª•c li√™n quan nh·∫•t ƒë·∫øn c√¢u h·ªèi, tu√¢n th·ªß schema m·ªôt c√°ch ch√≠nh x√°c.
L∆∞u √Ω quan tr·ªçng: N·∫øu kh√¥ng c√≥ th·ªß t·ª•c n√†o li√™n quan, tr·∫£ v·ªÅ "Kh√¥ng c√≥ th·ªß t·ª•c li√™n quan".
ƒê·ªãnh d·∫°ng k·∫øt qu·∫£: Kh√¥ng gi·∫£i th√≠ch, kh√¥ng b√¨nh lu·∫≠n, kh√¥ng vƒÉn b·∫£n th·ª´a. Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ JSON h·ª£p l·ªá. B·∫Øt ƒë·∫ßu b·∫±ng "{{", k·∫øt th√∫c b·∫±ng "}}".
"""

    # ================================================== LLM Processing and Final

    final_obj_for_api = {
        "input": input_text,
        "code": "",
        "name": "",
        "link": "https://dichvucong.lamdong.gov.vn/",
        "content": "M√¨nh c√≥ th·ªÉ gi√∫p ƒë∆∞·ª£c g√¨ cho b·∫°n?",
        "suggestions": [],
        "context_pool": "",
    }
    if input_text.strip() == "":
        return final_obj_for_api

    for _ in range(3):
        llmres1 = Process_LLM(prompt_1)
        regex_match = re.search(r'\{.*\}', llmres1, re.S)
        if regex_match:
            try:
                llm_object_1 = json.loads(regex_match.group())
                llm_object_1_idx_in_thutucs = next((icc for icc, dcc in enumerate(thutucs) if dcc["code"] == llm_object_1["M√£ chu·∫©n"].strip()), -1)
                if llm_object_1_idx_in_thutucs != -1:

                    # ========== The best thutuc by LLM ========== \
                    best_thutuc = thutucs[llm_object_1_idx_in_thutucs]
                    # ========== ---------------------- ========== /

                    # ========== Just thutucs suggestions ========== \
                    MIN_SIM_VS_LLMRES_TO_BE_SUGGESTED = 0.91
                    # -----
                    llm_object_1_id_in_res = -1
                    for iiiccc, eeeccc in enumerate(hyse_search_result[0]):
                        if best_thutuc["name"] == eeeccc["content"]:
                            llm_object_1_id_in_res = iiiccc
                    llm_object_1_id_in_res
                    # -----
                    hyse_res_idxs = []
                    for eee1 in [e['content'] for e in hyse_search_result[0]]:
                        for idxx, eee2 in enumerate(hyse_engine.search_engine_3.docs):
                            if eee1 == eee2:
                                hyse_res_idxs.append(idxx)
                                break
                    hyse_res_embs = np.array([hyse_engine.search_engine_3.embs[e] for e in hyse_res_idxs])
                    similarities = hyse_res_embs @ hyse_res_embs.T
                    hyse_search_result_sim_vs_llmres1 = similarities[llm_object_1_id_in_res]
                    # -----
                    hyse_search_result_filtered = [hyse_search_result[0][ell]["content"] for ell in [ill2 for ill2 in sorted(range(len(hyse_search_result_sim_vs_llmres1)), key=lambda ill: hyse_search_result_sim_vs_llmres1[ill], reverse=True) if hyse_search_result_sim_vs_llmres1[ill2] >= MIN_SIM_VS_LLMRES_TO_BE_SUGGESTED]]

                    for exactmatch_thutucname in hyse_engine.search_engine_1.search(queries)[0][:5]: # Just add the exactmatchs, so more suggestions
                        if exactmatch_thutucname not in hyse_search_result_filtered:
                            hyse_search_result_filtered.append(exactmatch_thutucname)
                    # -----
                    suggest_thutucs = []
                    context_pool_from_suggestions = []
                    for eee3 in hyse_search_result_filtered:
                        eee3_idx_in_thutucs = next((icc for icc, dcc in enumerate(thutucs) if dcc["name"] == eee3), -1)
                        suggest_thutucs.append({
                            "code": thutucs[eee3_idx_in_thutucs]["code"],
                            "name": thutucs[eee3_idx_in_thutucs]["name"],
                            "link": thutucs[eee3_idx_in_thutucs]["link"],
                        })
                        context_pool_from_suggestions.append(thutuc2context_full(thutucs[eee3_idx_in_thutucs]))
                    # ========== ------------------------- ========== /

                    context_pool_from_bestthutuc  = thutuc2context_full(best_thutuc)
                    context_pool_from_suggestions = "\n\n".join(context_pool_from_suggestions)

                    # ========== Return ========== \
                    final_obj_for_api["code"] = best_thutuc["code"]
                    final_obj_for_api["name"] = best_thutuc["name"]
                    final_obj_for_api["link"] = best_thutuc["link"]
                    # final_obj_for_api["content"] = thutuc2content_full(best_thutuc)
                    final_obj_for_api["content"] = craft_content_to_display_for_user(input_text, best_thutuc)
                    final_obj_for_api["content_data"] = craft_content_data(best_thutuc)
                    final_obj_for_api["suggestions"] = suggest_thutucs
                    # final_obj_for_api["context_pool"] = context_pool_from_bestthutuc
                    # ========== ------ ========== /

                    break
            except:
                pass

    return final_obj_for_api

# ====================================================================================================
# ====================================================================================================
# ====================================================================================================

# questions_for_test = [
#     "V·ª£ t√¥i s·∫Øp sinh con t√¥i c·∫ßn l√†m g√¨?",
#     "Gi·∫•y t·ªù c·∫ßn thi·∫øt ƒë·ªÉ m√¨nh kh·ªüi nghi·ªáp.",
#     "T√¥i mu·ªën t·ªë c√°o h√†ng x√≥m tr·ªìng c·∫ßn sa.",
#     "L√†m sao ƒë·ªÉ c∆∞·ªõi v·ª£?",
#     "T√¥i mu·ªën th√†nh l·∫≠p c√¥ng ty tnhh 2 th√†nh vi√™n",
#     "T√¥i mu·ªën th√†nh l·∫≠p c√¥ng ty tnhh 3 th√†nh vi√™n",
#     "M√¨nh mu·ªën c∆∞·ªõi ch·ªìng ng∆∞·ªùi n∆∞·ªõc ngo√†i",
#     "Ch√°u mu·ªën ph√∫c kh·∫£o b√†i thi thpt c·ªßa ch√°u",
#     "hello bro",
#     "\n",
# ]

# for input_text in questions_for_test:
#     dvcsa_res = DVC_SearchAssist(input_text)
#     print("=" * 100)
#     print("=" * 100)
#     print("=" * 100)
#     for kk in list(dvcsa_res.keys()):
#         if kk == "suggestions":
#             print(f"{kk}:")
#             for e in dvcsa_res[kk]:
#                 print(e)
#         else:
#             print(f"{kk}: {dvcsa_res[kk]}\n")
#     print("-" * 100)

# ====================================================================================================
# ====================================================================================================
# ====================================================================================================